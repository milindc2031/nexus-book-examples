apply plugin: 'java'
apply plugin: 'maven'

group = 'org.sonatype.nexus.examples'
version = '1.0.0'

repositories {
    maven {
        url "${nexusUrl}/content/groups/public"
    }
}

ext.stagingDirectory = file("${buildDir}/stage")
ext.repositoryDirectory = file("${buildDir}/repository")

configurations {
  // define a configuration just for using the nexus-ant-tasks, non-transitive as we use the uber jar
  nexusStaging {
    transitive = false
  }
}

dependencies {
  testCompile "junit:junit:3.8.1"
  compile "org.jbundle.util:org.jbundle.util.jbackup:2.0.0"
  compile "net.sf.webtestfixtures:webtestfixtures:2.0.1.3"
  compile "org.shoal:shoal-gms-api:1.5.8"
  compile "org.ow2.util:util-i18n:1.0.22"
  compile "com.sun.grizzly:grizzly-lzma:1.9.19-beta5"
  compile "org.codehaus.sonar:sonar-squid:2.9"
  compile "org.graniteds:granite-openjpa:2.2.0.SP1"
  compile "org.apache.tomcat:tomcat-util:7.0.0"
  compile "org.apache.camel:camel-http:2.4.0"
  compile "org.apache.struts.xwork:xwork-core:2.2.1"
  compile "org.jruby:jruby-complete:1.1RC1"
  compile "org.jruby:jruby:1.6.3"
  compile "org.mortbay.jetty:jetty:6.1.16"
  compile "org.apache.derby:derby:10.1.2.1"
  compile "org.springframework:spring-web:3.1.1.RELEASE"
  compile "com.google.code.facebookapi:facebook-java-api:3.0.4"
  compile "com.google.guava:guava:12.0"
  compile "com.google.guava:guava-gwt:12.0"
  compile "biz.littlej.jreqs:jreqs-guava:0.1.1"
  compile "org.sonatype.sisu:sisu-ehcache:1.1"
  compile "org.sonatype.sisu:sisu-xmlrpc-client:1.2.0"
  compile "com.googlecode:kiama_2.8.1:1.0.2"
  compile "com.googlecode:jyield:0.0.6"

  // use the uber jar which contains all necessary dependencies already,
  // the nexusStaging scope will not be included in the pom or output artifacts
  nexusStaging group: 'org.sonatype.nexus.ant', name: 'nexus-staging-ant-tasks', version: '1.6.3', classifier: 'uber'
}

uploadArchives {
  repositories {
    mavenDeployer {
      snapshotRepository(url: 'http://localhost:8081/nexus/content/repositories/snapshots') {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
    }
  }
}

task deploy(description: 'Build and deploy artifacts to staging and release staging repository',
    dependsOn: 'releaseStagingRepository')

task configure(description: "Configure staging deployment to $nexusUrl") {
  doLast {
    ant.taskdef(uri: 'staging', resource: 'org/sonatype/nexus/ant/staging/antlib.xml',
        classpath: configurations.nexusStaging.asPath)
    ant.'staging:nexusStagingInfo'(id: nexusStagingInfoId, stagingDirectory: stagingDirectory) {
      'staging:projectInfo'(groupId: group, artifactId: name, version: version)
      'staging:connectionInfo'(baseUrl: nexusUrl) {
        'staging:authentication'(username: nexusUsername, password: nexusPassword)
      }
    }
  }
}

task createRepository(dependsOn: [build], description: 'Create a local repository as build output') {
  inputs.dir "${buildDir}/libs"
  outputs.dir repositoryDirectory
  doLast {
  // create a local Maven repository in repositoryDirectory using the project coordinates
    String groupIdPath = project.group.replace('.', '/') 
    String repositoryPath = "${repositoryDirectory}/${groupIdPath}/${project.name}/${project.version}"
    File repositoryDirectory = new File(repositoryPath)
    repositoryDirectory.mkdirs()
    // adding a Maven pom file 
    String pomFileName = "${repositoryPath}/${project.name}-${project.version}.pom" 
    // pom will automatically have the dependencies and project coordinates included, you can add more here
    pom {}.writeTo(pomFileName)
    // adding the build output
    copy {
      from "${buildDir}/libs"
      into repositoryDirectory
    }
    logger.lifecycle("    Build artifacts deployed in repository in ${repositoryDirectory}")
  }
}

task stageLocally(dependsOn: [configure, build, createRepository], description: 'Prepares a local staging folder') {
  inputs.dir repositoryDirectory
  outputs.dir stagingDirectory
  doLast {
    ant.'staging:stageLocally' {
     'staging:nexusStagingInfo'(refid: nexusStagingInfoId)
      fileset(dir: repositoryDirectory, includes: "**/*.*")
    }
    logger.lifecycle("    Staged build output into ${stagingDirectory}")
  }
}

task stageRemotely(dependsOn: stageLocally, description: 'Upload the local staging folder') {
  doLast {
    ant.'staging:stageRemotely' {
      'staging:nexusStagingInfo'(refid: nexusStagingInfoId)
    }
    logger.lifecycle("    Created the remote staging repository.")
  }
}

task releaseStagingRepository(dependsOn: stageRemotely, description: 'Release the repo from staging') {
  doLast {
    ant.'staging:releaseStagingRepository'(description: 'release staging repo') {
      'staging:nexusStagingInfo'(refid: nexusStagingInfoId)
    }
    logger.lifecycle("    Released the remote staging repository.")
  }
}


task wrapper(type: Wrapper, description: "create a gradlew") {
  gradleVersion = '2.0'
}

